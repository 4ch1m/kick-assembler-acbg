/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.achimonline.kickassembler.acbg.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.achimonline.kickassembler.acbg.psi.KickAssemblerTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KickAssembler.flex</tt>
 */
class KickAssemblerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\13\1\33\1\34\1\6\1\10\1\113\1\0\1\27"+
    "\1\30\1\32\1\117\1\107\1\14\1\5\1\31\2\11\1\26\7\3\1\45\1\110\1\111\1\106"+
    "\1\112\1\120\1\0\1\46\1\15\1\50\1\47\1\63\1\7\1\12\1\53\1\65\1\101\1\72\1"+
    "\55\1\67\1\57\1\77\1\70\1\64\1\56\1\60\1\66\1\22\1\74\1\12\1\54\1\76\1\12"+
    "\1\104\1\0\1\105\1\115\1\4\1\0\1\16\1\61\1\21\1\35\1\36\1\37\1\12\1\51\1\20"+
    "\1\100\1\71\1\41\1\42\1\40\1\43\1\23\1\62\1\25\1\17\1\24\1\44\1\73\1\12\1"+
    "\52\1\75\1\12\1\102\1\114\1\103\1\116\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\10\1\1\7\1\10\1\11\1\12\1\1\1\13"+
    "\6\1\1\14\21\1\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\3\0\1\34\2\3\1\0\1\35\1\36"+
    "\1\37\1\40\37\0\1\41\1\42\1\43\1\44\1\0"+
    "\1\45\41\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\3\3\0\2\57\2\0\1\60"+
    "\11\0\1\3\1\42\14\0\1\60\12\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\121\0\u0195\0\u01e6"+
    "\0\u0237\0\u0288\0\u02d9\0\u032a\0\u037b\0\u03cc\0\u041d\0\u046e"+
    "\0\u04bf\0\u0510\0\121\0\121\0\u0561\0\u05b2\0\u0603\0\u0654"+
    "\0\u06a5\0\u06f6\0\u0747\0\u0798\0\u07e9\0\u083a\0\121\0\u088b"+
    "\0\u08dc\0\u092d\0\u097e\0\u09cf\0\u0a20\0\u0a71\0\u0ac2\0\u0b13"+
    "\0\u0b64\0\u0bb5\0\u0c06\0\u0c57\0\u0ca8\0\u0cf9\0\u0d4a\0\u0d9b"+
    "\0\121\0\121\0\121\0\121\0\u0dec\0\121\0\121\0\u0e3d"+
    "\0\u0e8e\0\u0edf\0\u0f30\0\121\0\121\0\u0f81\0\121\0\u0fd2"+
    "\0\u1023\0\u0144\0\121\0\u1074\0\u10c5\0\u1116\0\121\0\121"+
    "\0\121\0\121\0\u1167\0\u11b8\0\u1209\0\u125a\0\u12ab\0\u12fc"+
    "\0\u134d\0\u139e\0\u13ef\0\u1440\0\u1491\0\u14e2\0\u1533\0\u1584"+
    "\0\u15d5\0\u1626\0\u1677\0\u16c8\0\u1719\0\u176a\0\u17bb\0\u180c"+
    "\0\u185d\0\u18ae\0\u18ff\0\u1950\0\u19a1\0\u19f2\0\u1a43\0\u1a94"+
    "\0\u1ae5\0\u1b36\0\u1b87\0\121\0\121\0\u0603\0\121\0\u1bd8"+
    "\0\u1c29\0\u1c7a\0\u1ccb\0\u1d1c\0\u1d6d\0\u1dbe\0\u1e0f\0\u1e60"+
    "\0\u1eb1\0\u1f02\0\u1f53\0\u1fa4\0\u1ff5\0\u2046\0\u2097\0\u20e8"+
    "\0\u2139\0\u218a\0\u21db\0\u222c\0\u227d\0\u22ce\0\u231f\0\u2370"+
    "\0\u23c1\0\u2412\0\u2463\0\u24b4\0\u2505\0\u2556\0\u25a7\0\u25f8"+
    "\0\121\0\121\0\121\0\121\0\121\0\121\0\121\0\121"+
    "\0\121\0\u2649\0\u1074\0\u10c5\0\u269a\0\u0144\0\u26eb\0\u273c"+
    "\0\u278d\0\121\0\u27de\0\u282f\0\u2880\0\u28d1\0\u2922\0\u2973"+
    "\0\u29c4\0\u2649\0\u2a15\0\u0144\0\121\0\u2a66\0\u2ab7\0\u2b08"+
    "\0\u2b59\0\u2baa\0\u2bfb\0\u2c4c\0\u2c9d\0\u2cee\0\u2d3f\0\u2d90"+
    "\0\u2de1\0\u2e32\0\u2e83\0\u2ed4\0\u2f25\0\u2f76\0\u2fc7\0\u3018"+
    "\0\u3069\0\u30ba\0\u310b\0\u315c\0\121";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\4\1\5\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\5\1\20\1\21\1\22\1\4\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\5\1\36\1\5\1\37\1\40\1\41\1\42"+
    "\1\5\1\43\1\5\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\5\1\52\1\5\1\53\1\54\1\5\1\55"+
    "\6\5\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\122\0\2\3\121\0\1\4\1\100"+
    "\1\101\3\0\1\4\14\0\1\4\75\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\12\102\6\0\10\102\1\103"+
    "\34\102\22\0\1\104\3\0\1\104\1\0\1\104\3\0"+
    "\2\104\2\0\1\104\4\0\1\104\6\0\3\104\6\0"+
    "\3\104\10\0\1\104\1\0\1\104\46\0\1\105\113\0"+
    "\1\106\2\0\1\106\2\0\1\106\1\0\1\107\11\106"+
    "\7\0\10\106\1\0\34\106\4\0\1\110\10\0\1\107"+
    "\15\0\1\111\71\0\1\112\15\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\1\102\1\113\10\102\6\0\10\102"+
    "\1\103\2\102\1\114\5\102\1\115\1\116\3\102\1\117"+
    "\1\102\1\120\1\102\1\121\1\122\3\102\1\114\5\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\2\102"+
    "\1\123\5\102\1\124\1\102\6\0\1\125\2\102\1\126"+
    "\1\124\3\102\1\103\3\102\1\127\1\130\27\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\1\102\1\131"+
    "\1\102\1\124\3\102\1\132\1\133\1\102\6\0\1\102"+
    "\1\134\2\102\1\135\3\102\1\103\3\102\1\136\7\102"+
    "\1\137\20\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\2\102\1\125\7\102\6\0\3\102\1\140\4\102"+
    "\1\103\34\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\6\102\1\136\3\102\6\0\4\102\1\141\1\142"+
    "\2\102\1\103\34\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\4\102\1\143\3\102\1\103"+
    "\3\102\1\143\30\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\1\102\1\144\1\127\5\102\1\145\1\102"+
    "\6\0\10\102\1\103\4\102\1\146\22\102\1\147\4\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\7\102"+
    "\1\150\1\147\1\102\6\0\4\102\1\147\1\102\1\151"+
    "\1\102\1\103\34\102\50\0\1\152\1\153\53\0\1\154"+
    "\120\0\1\155\12\0\1\156\1\0\31\156\1\157\65\156"+
    "\20\0\1\160\14\0\1\161\1\162\5\0\1\163\57\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\4\102\1\142"+
    "\5\102\6\0\1\102\1\140\6\102\1\103\34\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\6\102\1\124\1\102\1\103\34\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\1\102\1\164\10\102\6\0"+
    "\10\102\1\103\34\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\6\102\1\142\1\165\1\103"+
    "\34\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\1\102\1\166\1\124\7\102\6\0\1\132\7\102\1\103"+
    "\34\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\10\102\1\147\1\102\6\0\10\102\1\103\34\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\10\102\1\103\1\102\1\167\3\102\1\170\1\171\2\172"+
    "\1\173\1\122\21\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\10\102\1\103\2\102\1\174"+
    "\12\102\1\175\16\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\10\102\1\103\7\102\1\176"+
    "\11\102\1\174\1\177\11\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\1\102\1\147\10\102\6\0\10\102"+
    "\1\103\34\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\12\102\6\0\10\102\1\103\1\200\33\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\10\102\1\103\1\201\1\202\10\102\1\172\21\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\10\102\1\103\7\102\2\200\7\102\1\203\10\102\1\204"+
    "\2\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\12\102\6\0\10\102\1\103\31\102\1\174\2\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\1\205\11\102"+
    "\6\0\10\102\1\103\1\206\4\102\1\177\1\102\1\207"+
    "\1\116\4\102\1\210\1\102\1\172\1\202\13\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\3\102\1\211"+
    "\1\212\1\102\1\123\1\102\1\213\1\102\6\0\1\102"+
    "\1\214\1\102\1\133\1\102\1\215\2\102\1\103\25\102"+
    "\1\212\6\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\12\102\6\0\10\102\1\103\31\102\1\172\2\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\12\102"+
    "\6\0\10\102\1\103\11\102\1\175\1\167\21\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\10\102\1\103\1\216\5\102\1\217\3\102\1\170\15\102"+
    "\1\200\3\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\12\102\6\0\10\102\1\103\5\102\1\220\1\102"+
    "\1\220\24\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\12\102\6\0\10\102\1\103\10\102\1\200\23\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\2\102"+
    "\1\124\7\102\6\0\5\102\1\142\2\102\1\103\34\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\12\102"+
    "\6\0\10\102\1\103\12\102\1\172\6\102\1\174\12\102"+
    "\125\0\1\221\120\0\1\222\2\0\1\223\115\0\1\224"+
    "\3\0\1\225\121\0\1\226\121\0\1\227\112\0\1\230"+
    "\10\0\1\231\4\0\1\4\1\100\4\0\1\4\14\0"+
    "\1\4\75\0\1\232\5\0\1\232\14\0\1\232\75\0"+
    "\1\104\1\233\2\0\1\104\1\0\1\104\3\0\2\104"+
    "\2\0\1\104\4\0\1\104\6\0\3\104\6\0\3\104"+
    "\10\0\1\104\1\0\1\104\41\0\1\234\4\0\1\105"+
    "\112\0\2\106\2\0\1\106\1\0\2\106\1\0\1\107"+
    "\12\106\6\0\10\106\1\0\34\106\15\0\1\107\4\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\2\102\1\235"+
    "\7\102\6\0\10\102\1\103\34\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\12\102\6\0\10\102\1\103"+
    "\2\102\1\236\7\102\1\236\21\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\12\102\6\0\10\102\1\103"+
    "\1\236\23\102\1\236\7\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\12\102\6\0\10\102\1\103\15\102"+
    "\1\236\16\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\12\102\6\0\10\102\1\103\16\102\1\236\15\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\12\102"+
    "\6\0\10\102\1\103\20\102\1\236\13\102\22\0\2\102"+
    "\2\0\1\102\1\0\2\102\2\0\12\102\6\0\10\102"+
    "\1\103\17\102\1\236\14\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\12\102\6\0\10\102\1\103\7\102"+
    "\1\236\24\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\12\102\6\0\4\102\1\236\3\102\1\103\34\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\10\102"+
    "\1\236\1\102\6\0\10\102\1\103\34\102\22\0\2\102"+
    "\2\0\1\102\1\0\2\102\2\0\4\102\1\236\5\102"+
    "\6\0\10\102\1\103\34\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\4\102\1\237\5\102\6\0\1\236"+
    "\7\102\1\103\34\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\10\102\1\103\4\102\1\236"+
    "\27\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\2\102\1\236\7\102\6\0\10\102\1\103\34\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\4\102\1\236"+
    "\5\102\6\0\10\102\1\103\4\102\1\236\27\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\1\102\1\236"+
    "\10\102\6\0\10\102\1\103\4\102\1\236\22\102\1\236"+
    "\4\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\12\102\6\0\1\102\1\236\6\102\1\103\34\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\3\102\2\236"+
    "\5\102\6\0\1\236\7\102\1\103\34\102\22\0\2\102"+
    "\2\0\1\102\1\0\2\102\2\0\12\102\6\0\6\102"+
    "\1\236\1\102\1\103\34\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\12\102\6\0\10\102\1\103\4\102"+
    "\1\236\22\102\1\236\4\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\4\102\1\237\5\102\6\0\10\102"+
    "\1\103\34\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\4\102\1\236\5\102\6\0\10\102\1\103\4\102"+
    "\1\236\22\102\1\236\4\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\3\102\2\236\5\102\6\0\1\236"+
    "\7\102\1\103\25\102\1\236\6\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\6\102\1\236\3\102\6\0"+
    "\10\102\1\103\34\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\1\102\1\236\4\102\1\236\3\102\6\0"+
    "\10\102\1\103\34\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\2\102\1\236\7\102\6\0\10\102\1\103"+
    "\4\102\1\236\22\102\1\236\4\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\12\102\6\0\7\102\1\240"+
    "\1\103\34\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\1\102\2\236\7\102\6\0\10\102\1\103\34\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\1\102"+
    "\1\236\10\102\6\0\10\102\1\103\34\102\22\0\2\102"+
    "\2\0\1\102\1\0\2\102\2\0\2\102\2\236\6\102"+
    "\6\0\10\102\1\103\34\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\10\102\1\236\1\102\6\0\4\102"+
    "\1\236\3\102\1\103\34\102\17\0\1\152\1\0\117\152"+
    "\32\153\1\241\66\153\37\0\1\242\2\0\1\243\114\0"+
    "\1\244\122\0\1\245\1\246\117\0\1\247\63\0\2\102"+
    "\2\0\1\102\1\0\2\102\2\0\12\102\6\0\4\102"+
    "\1\250\3\102\1\103\34\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\12\102\6\0\4\102\1\251\3\102"+
    "\1\103\34\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\2\102\1\236\7\102\6\0\10\102\1\103\4\102"+
    "\1\236\27\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\12\102\6\0\10\102\1\103\2\102\1\236\31\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\12\102"+
    "\6\0\10\102\1\103\6\102\1\236\25\102\22\0\2\102"+
    "\2\0\1\102\1\0\2\102\2\0\12\102\6\0\10\102"+
    "\1\103\12\102\1\236\21\102\22\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\12\102\6\0\10\102\1\103\10\102"+
    "\1\236\23\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\12\102\6\0\10\102\1\103\1\102\1\236\1\237"+
    "\31\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\12\102\6\0\10\102\1\103\22\102\1\236\11\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\10\102\1\103\2\102\1\236\3\102\1\236\21\102\1\236"+
    "\3\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\12\102\6\0\10\102\1\103\1\102\2\236\14\102\1\236"+
    "\6\102\1\236\5\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\10\102\1\103\6\102\1\236"+
    "\21\102\1\236\3\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\10\102\1\103\1\236\33\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\12\102"+
    "\6\0\10\102\1\103\6\102\1\236\3\102\1\236\21\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\12\102"+
    "\6\0\10\102\1\103\1\236\5\102\1\236\21\102\1\236"+
    "\3\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\12\102\6\0\10\102\1\103\12\102\1\236\4\102\1\236"+
    "\14\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\12\102\6\0\10\102\1\103\7\102\2\236\23\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\10\102\1\103\2\102\1\237\31\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\12\102\6\0\10\102\1\103"+
    "\2\102\1\236\3\102\1\236\25\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\12\102\6\0\10\102\1\103"+
    "\31\102\1\236\2\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\10\102\1\103\1\102\2\236"+
    "\14\102\1\236\14\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\7\102\1\236\2\102\6\0\10\102\1\103"+
    "\34\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\2\102\1\236\1\102\1\236\5\102\6\0\10\102\1\103"+
    "\34\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\1\102\1\236\10\102\6\0\10\102\1\103\23\102\1\236"+
    "\10\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\12\102\6\0\10\102\1\103\14\102\1\236\17\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\3\102\1\236"+
    "\6\102\6\0\10\102\1\103\34\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\12\102\6\0\10\102\1\103"+
    "\6\102\1\236\3\102\1\236\15\102\1\236\3\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\10\102\1\103\1\236\11\102\1\236\21\102\22\0\2\102"+
    "\2\0\1\102\1\0\2\102\2\0\12\102\6\0\10\102"+
    "\1\103\1\236\21\102\1\236\11\102\22\0\1\232\1\252"+
    "\4\0\1\232\14\0\1\232\75\0\2\102\2\0\1\102"+
    "\1\0\2\102\2\0\3\102\1\253\6\102\6\0\10\102"+
    "\1\103\34\102\22\0\2\102\2\0\1\102\1\0\2\102"+
    "\2\0\11\102\1\236\6\0\10\102\1\103\34\102\22\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\12\102\6\0"+
    "\1\102\1\254\6\102\1\103\34\102\17\0\31\153\1\255"+
    "\1\241\66\153\23\0\1\256\134\0\1\257\116\0\1\260"+
    "\102\0\1\261\1\262\135\0\1\263\66\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\2\102\1\240\7\102\6\0"+
    "\10\102\1\103\34\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\12\102\6\0\4\102\1\254\3\102\1\103"+
    "\34\102\22\0\2\102\2\0\1\102\1\0\2\102\2\0"+
    "\4\102\1\264\5\102\6\0\10\102\1\103\34\102\62\0"+
    "\1\265\75\0\1\266\120\0\1\262\136\0\1\242\121\0"+
    "\1\242\117\0\1\262\65\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\5\102\1\267\4\102\6\0\10\102\1\103"+
    "\34\102\44\0\1\270\133\0\1\261\63\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\6\102\1\271\3\102\6\0"+
    "\10\102\1\103\34\102\43\0\1\272\77\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\2\102\1\273\7\102\6\0"+
    "\10\102\1\103\34\102\37\0\1\262\22\0\1\274\60\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\7\102\1\275"+
    "\2\102\6\0\10\102\1\103\34\102\57\0\1\276\63\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\1\102\1\277"+
    "\10\102\6\0\10\102\1\103\34\102\40\0\1\261\102\0"+
    "\2\102\2\0\1\102\1\0\2\102\2\0\10\102\1\300"+
    "\1\102\6\0\10\102\1\103\34\102\22\0\2\102\2\0"+
    "\1\102\1\0\2\102\2\0\7\102\1\301\2\102\6\0"+
    "\10\102\1\103\34\102\22\0\2\102\2\0\1\102\1\0"+
    "\2\102\2\0\11\102\1\302\6\0\10\102\1\103\34\102"+
    "\22\0\2\102\2\0\1\102\1\0\2\102\2\0\12\102"+
    "\1\303\5\0\10\102\1\103\34\102\23\0\1\304\2\0"+
    "\1\304\2\0\1\304\2\0\11\304\7\0\10\304\1\0"+
    "\34\304\22\0\2\304\2\0\1\304\1\0\2\304\2\0"+
    "\12\304\1\0\1\305\4\0\10\304\1\0\34\304\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12717];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\14\1\2\11\12\1\1\11"+
    "\21\1\4\11\1\1\2\11\4\1\2\11\1\1\1\11"+
    "\3\0\1\11\2\1\1\0\4\11\37\0\2\1\2\11"+
    "\1\0\1\11\41\0\11\11\1\1\3\0\2\1\2\0"+
    "\1\11\11\0\1\1\1\11\14\0\1\1\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KickAssemblerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return KickAssemblerTypes.DUMMY;
            } 
            // fall through
          case 50: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 51: break;
          case 3: 
            { return KickAssemblerTypes.NUMBER;
            } 
            // fall through
          case 52: break;
          case 4: 
            { return KickAssemblerTypes.DOT;
            } 
            // fall through
          case 53: break;
          case 5: 
            { return KickAssemblerTypes.NOT;
            } 
            // fall through
          case 54: break;
          case 6: 
            { return KickAssemblerTypes.MINUS;
            } 
            // fall through
          case 55: break;
          case 7: 
            { return KickAssemblerTypes.LEFT_PARENTHESES;
            } 
            // fall through
          case 56: break;
          case 8: 
            { return KickAssemblerTypes.RIGHT_PARENTHESES;
            } 
            // fall through
          case 57: break;
          case 9: 
            { return KickAssemblerTypes.DIVIDE;
            } 
            // fall through
          case 58: break;
          case 10: 
            { return KickAssemblerTypes.TIMES;
            } 
            // fall through
          case 59: break;
          case 11: 
            { return KickAssemblerTypes.HASH;
            } 
            // fall through
          case 60: break;
          case 12: 
            { return KickAssemblerTypes.COLON;
            } 
            // fall through
          case 61: break;
          case 13: 
            { return KickAssemblerTypes.LEFT_BRACE;
            } 
            // fall through
          case 62: break;
          case 14: 
            { return KickAssemblerTypes.RIGHT_BRACE;
            } 
            // fall through
          case 63: break;
          case 15: 
            { return KickAssemblerTypes.LEFT_BRACKET;
            } 
            // fall through
          case 64: break;
          case 16: 
            { return KickAssemblerTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 65: break;
          case 17: 
            { return KickAssemblerTypes.ASSIGN;
            } 
            // fall through
          case 66: break;
          case 18: 
            { return KickAssemblerTypes.COMMA;
            } 
            // fall through
          case 67: break;
          case 19: 
            { return KickAssemblerTypes.SEMICOLON;
            } 
            // fall through
          case 68: break;
          case 20: 
            { return KickAssemblerTypes.LESS;
            } 
            // fall through
          case 69: break;
          case 21: 
            { return KickAssemblerTypes.GREATER;
            } 
            // fall through
          case 70: break;
          case 22: 
            { return KickAssemblerTypes.BIT_AND;
            } 
            // fall through
          case 71: break;
          case 23: 
            { return KickAssemblerTypes.BIT_OR;
            } 
            // fall through
          case 72: break;
          case 24: 
            { return KickAssemblerTypes.BIT_XOR;
            } 
            // fall through
          case 73: break;
          case 25: 
            { return KickAssemblerTypes.BIT_NOT;
            } 
            // fall through
          case 74: break;
          case 26: 
            { return KickAssemblerTypes.PLUS;
            } 
            // fall through
          case 75: break;
          case 27: 
            { return KickAssemblerTypes.QUESTION_MARK;
            } 
            // fall through
          case 76: break;
          case 28: 
            { return KickAssemblerTypes.LABEL;
            } 
            // fall through
          case 77: break;
          case 29: 
            { return KickAssemblerTypes.LOCAL_LABEL;
            } 
            // fall through
          case 78: break;
          case 30: 
            { return KickAssemblerTypes.NOT_EQUAL;
            } 
            // fall through
          case 79: break;
          case 31: 
            { return KickAssemblerTypes.MINUS_MINUS;
            } 
            // fall through
          case 80: break;
          case 32: 
            { return KickAssemblerTypes.MINUS_EQUAL;
            } 
            // fall through
          case 81: break;
          case 33: 
            { return KickAssemblerTypes.COMMENT_LINE;
            } 
            // fall through
          case 82: break;
          case 34: 
            { return KickAssemblerTypes.COMMENT_BLOCK;
            } 
            // fall through
          case 83: break;
          case 35: 
            { return KickAssemblerTypes.DIVIDE_EQUAL;
            } 
            // fall through
          case 84: break;
          case 36: 
            { return KickAssemblerTypes.TIMES_EQUAL;
            } 
            // fall through
          case 85: break;
          case 37: 
            { return KickAssemblerTypes.STRING;
            } 
            // fall through
          case 86: break;
          case 38: 
            { return KickAssemblerTypes.EQUAL;
            } 
            // fall through
          case 87: break;
          case 39: 
            { return KickAssemblerTypes.LESS_EQUALS;
            } 
            // fall through
          case 88: break;
          case 40: 
            { return KickAssemblerTypes.SHIFT_LEFT;
            } 
            // fall through
          case 89: break;
          case 41: 
            { return KickAssemblerTypes.GREATER_EQUALS;
            } 
            // fall through
          case 90: break;
          case 42: 
            { return KickAssemblerTypes.SHIFT_RIGHT;
            } 
            // fall through
          case 91: break;
          case 43: 
            { return KickAssemblerTypes.AND;
            } 
            // fall through
          case 92: break;
          case 44: 
            { return KickAssemblerTypes.OR;
            } 
            // fall through
          case 93: break;
          case 45: 
            { return KickAssemblerTypes.PLUS_EQUAL;
            } 
            // fall through
          case 94: break;
          case 46: 
            { return KickAssemblerTypes.PLUS_PLUS;
            } 
            // fall through
          case 95: break;
          case 47: 
            { return KickAssemblerTypes.MNEMONIC;
            } 
            // fall through
          case 96: break;
          case 48: 
            { return KickAssemblerTypes.PREPROCESSOR;
            } 
            // fall through
          case 97: break;
          case 49: 
            { return KickAssemblerTypes.BASIC_UPSTART;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
